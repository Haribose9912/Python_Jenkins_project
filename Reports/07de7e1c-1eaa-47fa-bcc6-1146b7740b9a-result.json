{"name": "test_page_title", "status": "broken", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'capabilities'", "trace": "service = <selenium.webdriver.chrome.service.Service object at 0x000001B856E63370>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n>           path = SeleniumManager().driver_location(options) if path is None else path\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.selenium_manager.SeleniumManager object at 0x000001B856E635E0>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    def driver_location(self, options: BaseOptions) -> str:\n        \"\"\"\n        Determines the path of the correct driver.\n        :Args:\n         - browser: which browser to get the driver path for.\n        :Returns: The driver path to use\n        \"\"\"\n    \n>       browser = options.capabilities[\"browserName\"]\nE       AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:71: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup' for <Function test_page_title>>, browser = None\n\n    @pytest.fixture(autouse=True)\n    # @pytest.fixture()\n    def setup(request, browser):\n        ssl_cert = Options()\n        # ssl_cert.use_chromium = True\n        ssl_cert.add_argument('--ignore-certificate-errors')\n    \n        opt = Options()\n        opt.add_argument('--headless')\n        opt.add_argument('--ignore-certificate-errors')\n        # def setup():\n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=ssl_cert)\n            print(\"Launching Chrome browser\")\n        elif browser == 'edge':\n            driver = webdriver.Edge(EdgeChromiumDriverManager().install(), options=ssl_cert)\n            print(\"Launching Edge browser\")\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n            print(\"Launching Firefox browser\")\n        elif browser == 'headless':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=opt)\n            print(\"Launching Headless browser\")\n        else:\n            # driver = webdriver.Chrome(ChromeDriverManager(version=\"116.0.5845.97\").install(), options=ssl_cert)\n>           driver = webdriver.Chrome(ChromeDriverManager().install())\n\nTestcases\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:51: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001B856E63370>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n>           msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\nE           AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:40: AttributeError"}, "attachments": [{"name": "log", "source": "446a2ec6-8ea8-4f8a-bb87-df6fbd8fc60a-attachment.txt", "type": "text/plain"}], "start": 1693661900895, "stop": 1693661900895, "uuid": "3d4fc034-e0e8-4f78-b414-059c21a1f422", "historyId": "40720728c6e868acc2cba7a22ae1e4d0", "testCaseId": "40720728c6e868acc2cba7a22ae1e4d0", "fullName": "Testcases.Formfilltest.Test_form_001#test_page_title", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "Testcases"}, {"name": "suite", "value": "Formfilltest"}, {"name": "subSuite", "value": "Test_form_001"}, {"name": "host", "value": "DESKTOP-6625IDT"}, {"name": "thread", "value": "21408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.Formfilltest"}]}