{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 3}, "tests": {"0": {"status": "ERROR", "message": "service = <selenium.webdriver.chrome.service.Service object at 0x000001B856E63370>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n>           path = SeleniumManager().driver_location(options) if path is None else path\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.selenium_manager.SeleniumManager object at 0x000001B856E635E0>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    def driver_location(self, options: BaseOptions) -> str:\n        \"\"\"\n        Determines the path of the correct driver.\n        :Args:\n         - browser: which browser to get the driver path for.\n        :Returns: The driver path to use\n        \"\"\"\n    \n>       browser = options.capabilities[\"browserName\"]\nE       AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:71: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup' for <Function test_page_title>>, browser = None\n\n    @pytest.fixture(autouse=True)\n    # @pytest.fixture()\n    def setup(request, browser):\n        ssl_cert = Options()\n        # ssl_cert.use_chromium = True\n        ssl_cert.add_argument('--ignore-certificate-errors')\n    \n        opt = Options()\n        opt.add_argument('--headless')\n        opt.add_argument('--ignore-certificate-errors')\n        # def setup():\n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=ssl_cert)\n            print(\"Launching Chrome browser\")\n        elif browser == 'edge':\n            driver = webdriver.Edge(EdgeChromiumDriverManager().install(), options=ssl_cert)\n            print(\"Launching Edge browser\")\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n            print(\"Launching Firefox browser\")\n        elif browser == 'headless':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=opt)\n            print(\"Launching Headless browser\")\n        else:\n            # driver = webdriver.Chrome(ChromeDriverManager(version=\"116.0.5845.97\").install(), options=ssl_cert)\n>           driver = webdriver.Chrome(ChromeDriverManager().install())\n\nTestcases\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:51: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001B856E63370>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n>           msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\nE           AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:40: AttributeError\n", "test_name": "test_page_title", "rerun": "0"}, "1": {"status": "ERROR", "message": "service = <selenium.webdriver.chrome.service.Service object at 0x000001B856F357E0>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n>           path = SeleniumManager().driver_location(options) if path is None else path\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.selenium_manager.SeleniumManager object at 0x000001B856F34340>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    def driver_location(self, options: BaseOptions) -> str:\n        \"\"\"\n        Determines the path of the correct driver.\n        :Args:\n         - browser: which browser to get the driver path for.\n        :Returns: The driver path to use\n        \"\"\"\n    \n>       browser = options.capabilities[\"browserName\"]\nE       AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:71: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup' for <Function test_form_fill>>, browser = None\n\n    @pytest.fixture(autouse=True)\n    # @pytest.fixture()\n    def setup(request, browser):\n        ssl_cert = Options()\n        # ssl_cert.use_chromium = True\n        ssl_cert.add_argument('--ignore-certificate-errors')\n    \n        opt = Options()\n        opt.add_argument('--headless')\n        opt.add_argument('--ignore-certificate-errors')\n        # def setup():\n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=ssl_cert)\n            print(\"Launching Chrome browser\")\n        elif browser == 'edge':\n            driver = webdriver.Edge(EdgeChromiumDriverManager().install(), options=ssl_cert)\n            print(\"Launching Edge browser\")\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n            print(\"Launching Firefox browser\")\n        elif browser == 'headless':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=opt)\n            print(\"Launching Headless browser\")\n        else:\n            # driver = webdriver.Chrome(ChromeDriverManager(version=\"116.0.5845.97\").install(), options=ssl_cert)\n>           driver = webdriver.Chrome(ChromeDriverManager().install())\n\nTestcases\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:51: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001B856F357E0>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n>           msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\nE           AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:40: AttributeError\n", "test_name": "test_form_fill", "rerun": "0"}, "2": {"status": "ERROR", "message": "service = <selenium.webdriver.chrome.service.Service object at 0x000001B856E61600>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n>           path = SeleniumManager().driver_location(options) if path is None else path\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.selenium_manager.SeleniumManager object at 0x000001B856E63C70>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    def driver_location(self, options: BaseOptions) -> str:\n        \"\"\"\n        Determines the path of the correct driver.\n        :Args:\n         - browser: which browser to get the driver path for.\n        :Returns: The driver path to use\n        \"\"\"\n    \n>       browser = options.capabilities[\"browserName\"]\nE       AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:71: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup' for <Function test_form_fill2>>, browser = None\n\n    @pytest.fixture(autouse=True)\n    # @pytest.fixture()\n    def setup(request, browser):\n        ssl_cert = Options()\n        # ssl_cert.use_chromium = True\n        ssl_cert.add_argument('--ignore-certificate-errors')\n    \n        opt = Options()\n        opt.add_argument('--headless')\n        opt.add_argument('--ignore-certificate-errors')\n        # def setup():\n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=ssl_cert)\n            print(\"Launching Chrome browser\")\n        elif browser == 'edge':\n            driver = webdriver.Edge(EdgeChromiumDriverManager().install(), options=ssl_cert)\n            print(\"Launching Edge browser\")\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n            print(\"Launching Firefox browser\")\n        elif browser == 'headless':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=opt)\n            print(\"Launching Headless browser\")\n        else:\n            # driver = webdriver.Chrome(ChromeDriverManager(version=\"116.0.5845.97\").install(), options=ssl_cert)\n>           driver = webdriver.Chrome(ChromeDriverManager().install())\n\nTestcases\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:51: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001B856E61600>\noptions = 'C:\\\\Users\\\\Harish kumar\\\\.wdm\\\\drivers\\\\chromedriver\\\\win64\\\\116.0.5845.111\\\\chromedriver-win32/chromedriver.exe'\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n>           msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\nE           AttributeError: 'str' object has no attribute 'capabilities'\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:40: AttributeError\n", "test_name": "test_form_fill2", "rerun": "0"}}, "suite_name": "Testcases/Formfilltest.py"}}}, "date": "September 02, 2023", "start_time": 1693661905.103665, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}